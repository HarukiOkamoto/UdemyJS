//非同期処理の実行タイミングについて

//非同期の全ての処理は、jsの処理が終わってから実行される。
//タスクキュー(先入先出)
setTimeout(() => {
    console.log('after 1000ms');
}, 1000);

for (let i = 0; i <= 1e5; i++) {
    setTimeout(() => {
        document.body.textContent = i;
    });
}
console.log('after for');

//同じイベントのものは一つのタスクにまとまって入っている。
//promiseのタスクキューはマイクロタスクキューというところに格納される
//優先度がタスクキューよりも高く、マイクロタスクキューの処理が終わるまで、タスクキューに戻らない
//タスクキューとマイクロタスクキューやレンダリングのローテートをイベントループという

//レンダリングのタイミング
//タスクキュー → マイクロタスクキュー → レンダリング → タスクキュー ・・・

//レンダリングの直前に何か処理を実行したい場合
//requestAnimationFrame()
//animation frame callbacksというキューに格納
// タスクキュー → マイクロタスクキュー →　animation frame callbacks → レンダリング → タスクキュー ・・・

//レンダリングがスキップされる時
//1,ディスプレイがレンダリングできない時(FPS)
//2,パソコンが重い時
//3,表示させたい画面がディスプレイ上にないtき
//4,見た目の変更がない時かつ、animation frame callbacksに何もない時
//5,ブラウザがスキップしたい時
